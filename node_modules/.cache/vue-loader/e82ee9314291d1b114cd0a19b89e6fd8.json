{"remainingRequest":"/home/rcolomina/gain_theory_test/problem_1/vue_js/planets_population/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/rcolomina/gain_theory_test/problem_1/vue_js/planets_population/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/rcolomina/gain_theory_test/problem_1/vue_js/planets_population/src/App.vue","mtime":1570965250030},{"path":"/home/rcolomina/gain_theory_test/problem_1/vue_js/planets_population/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rcolomina/gain_theory_test/problem_1/vue_js/planets_population/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/rcolomina/gain_theory_test/problem_1/vue_js/planets_population/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rcolomina/gain_theory_test/problem_1/vue_js/planets_population/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\nimport jsonData from './assets/planets_males.json';\nimport Vue from 'vue'\nimport BootstrapVue from 'bootstrap-vue'\n\nvar malesOnPlanets = {}\nvar femalesOnPlanets = {}\nvar planets = []\n\nvar populationOnPlanets = [] // array of items to show on table\n\nvar totalPopulation = {} // map of items  to show on foot table\n\nvar rowForTotalPopulation = [] // array of items for tota\n\nexport default {\n    name: 'app',\n    mounted(){\n        console.log(\"mounted\")\n    },\n    created() {\n        console.log(\"created\")\n        const arr = jsonData.map(p => p.Planet)\n        const setPlanets = new Set(arr)\n        planets = Array.from(setPlanets)\n\n        // Build hash maps for males and females from planet to number of individuals\n        planets.forEach(function(planet){\n            var malesByPlanet   = jsonData.filter(item => item.Planet === planet && item.Males === 1)\n            var femalesByPlanet = jsonData.filter(item => item.Planet === planet && item.Males === 0)\n            \n            malesOnPlanets[planet]   = malesByPlanet.length\n            femalesOnPlanets[planet] = femalesByPlanet.length\n        })\n        \n        console.log(malesOnPlanets)\n        console.log(femalesOnPlanets)\n        console.log(planets)\n\n        planets.forEach(function(planet){\n            populationOnPlanets.push({\"Planet\" :planet,\n                                      \"Males\"  :malesOnPlanets[planet],\n                                      \"Females\":femalesOnPlanets[planet]})\n        })\n\n        totalPopulation[\"Males\"]   = jsonData.filter(item => item.Males === 1).length\n        totalPopulation[\"Females\"] = jsonData.filter(item => item.Males === 0).length\n        var totalpop = totalPopulation[\"Males\"] + totalPopulation[\"Females\"];\n        totalPopulation[\"All\"] = totalpop\n        \n        rowForTotalPopulation.push({\"Set of Planets\":\"Solar System\",\n                                    \"Total Males\":totalPopulation[\"Males\"],\n                                    \"Total Females\":totalPopulation[\"Females\"],\n                                    \"Total Population\":totalpop})\n        //populationOnPlanets.push({\"Planet\":\"Z All Planets\",\"Males\":totalPopulation[\"Males\"], \"Females\":totalPopulation[\"Females\"]})\n        //rowForTotalPopulation.push({\"Total\":\"All Planets\",\"Males\":totalPopulation[\"Males\"], \"Females\":totalPopulation[\"Females\"]})\n    },\n    methods: {\n        updateTable(){\n            console.log(\"udate table\")\n            \n            var fieldsOnchange = []\n            var fieldsOnchange2 = []\n            fieldsOnchange.push({ key: 'Planet',  sortable: true })\n            fieldsOnchange2.push({ key: 'Set of Planets'})\n            \n            if (this.selectedSexes.includes('males'))\n            {\n                fieldsOnchange.push({key: 'Males', sortable: true})\n                fieldsOnchange2.push({key: 'Total Males'})\n            }\n            if (this.selectedSexes.includes('females'))\n            {\n                fieldsOnchange.push({key:'Females', sortable: true})\n                fieldsOnchange2.push({key: 'Total Females'})\n            }\n\n            if (this.selectedSexes.includes('males') && this.selectedSexes.includes('females') ){\n                fieldsOnchange2.push({key: 'Total Population'})\n            }\n            \n            this.fields1 = fieldsOnchange\n            this.fields2 = fieldsOnchange2\n        },\n        computePopulationScaling(){\n            \n            console.log(this.factorA)\n            console.log(this.factorB)\n\n            if(this.factorA === null || this.factorB === null){\n\n                this.errorMessage = \"Enter Not Null Factors\"\n                this.scalingFactorMales   = \"Not calculated\"\n                this.scalingFactorFemales = \"Not calculated\"\n                this.scalingFactorAll     = \"Not calculated\"                \n\n            }\n            else\n                {            \n                    // check inputs are numbers in valid range\n                    console.log(isNaN(this.factorA))\n                    console.log(isNaN(this.factorB))\n\n                    var badCondition0 = isNaN(this.factorA) || isNaN(this.factorB)\n                    var badCondition1 = this.factorA < 2 || this.factorA > 10000\n                    var badCondition2 = this.factorB < 2 || this.factorB > 10000\n                    \n                    if( badCondition0 || badCondition1 || badCondition2){\n                        this.errorMessage = \"Enter Numerical float Factors in range [2-10000]\"\n                        this.scalingFactorMales   = \"Not calculated\"\n                        this.scalingFactorFemales = \"Not calculated\"\n                        this.scalingFactorAll     = \"Not calculated\"                                                                              \n                    }                \n                    else {\n\n                        var numMales   = totalPopulation[\"Males\"]\n                        var numFemales = totalPopulation[\"Females\"]\n                        var numAll     = totalPopulation[\"All\"]\n\n                        var denominator = (this.factorB - 1) * (this.factorB - 1)\n                        \n                        this.scalingFactorMales   = (this.factorA * numMales   ) / denominator\n                        this.scalingFactorFemales = (this.factorA * numFemales ) / denominator\n                        this.scalingFactorAll     = (this.factorA * numAll     ) / denominator \n                        this.errorMessage = \"Entered Factors were OK -> Scaling Factors Calculated OK\"\n                    }\n                }            \n        }                \n    },\n    data() {\n        return {\n            sortBy: 'Planet',\n            fields1: [\n                { key: 'Planet',  sortable: true }]\n            ,\n            fields2 : [{ key: 'Set of Planets'}],\n            typeOfPeopleSelected: \"\",\n            planets: [],\n            malesOnPlanets:{},\n            femalesOnPlanets:{},\n            itemsTable: populationOnPlanets,\n            itemsTable2: rowForTotalPopulation,\n            totalPop: totalPopulation,\n            selectedSexes: [],\n            factorA: null,\n            factorB: null,\n            scalingFactorMales: null,\n            scalingFactorFemales: null,\n            scalingFactorAll: null,\n            errorMessage: \"----\"\n        }\n    },\n    computed: {\n        malesTotal() {\n            //totalPopulation[\"Males\"]   = jsonData.filter(item => item.Males === 1).length\n            //totalPopulation[\"Females\"] = jsonData.filter(item => item.Males === 0).length\n            //totalPopulation[\"Total\"]   = totalPopulation[\"Males\"] + totalPopulation[\"Females\"]\n            \n            return jsonData.filter(item => item.Males === 1).length\n        },\n        femalesTotal() {\n            return jsonData.filter(item => item.Males === 0).length\n        },\n        allTotal() {\n            return 100;\n        }\n        \n        \n    }\n    \n}\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n<div id=\"app\">\n\n\n  <b-form-group label=\"Please, select Males/Females and click on Select button\">\n    <b-form-checkbox-group id=\"checkbox-group-1\" v-model=\"selectedSexes\">\n      <b-form-checkbox value=\"males\">Males</b-form-checkbox>\n      <b-form-checkbox value=\"females\">Females</b-form-checkbox>\n      <b-button @click=\"updateTable\">Select</b-button>\n    </b-form-checkbox-group>    \n  </b-form-group>\n  \n  <div>Selected: <strong>{{ selectedSexes }}</strong></div>\n  \n  <div class=\"container\">\n    <div class=\"row\">\n      <b-table\n        :sort-by.sync=\"sortBy\"\n        :fields=\"fields1\"\n        :items=\"itemsTable\"\n        striped hover\n        >\n        </b-table>     \n    </div>    \n    <div class=\"row\">      \n      <b-table\n        :fields=\"fields2\"\n        striped hover :items=\"itemsTable2\">\n      </b-table>\n    </div>\n\n    <b-form-group label=\"Population Scaling: Enter factors a and b in the fields bellow, and click on Calculate Population Scaling Button\">\n      <b-container>\n        <b-row class=\"scaling\">          \n          <b-col md=\"auto\">\n            <b-row>Factor A <b-form-input v-model=\"factorA\" placeholder=\"Enter factor a\"></b-form-input></b-row>\n            <b-row>Factor B <b-form-input v-model=\"factorB\" placeholder=\"Enter factor b\"></b-form-input></b-row>\n\n            <b-row>{{ this.errorMessage }}</b-row>\n\n            <b-row><b-button @click=\"computePopulationScaling\">Calculate Population Scaling</b-button></b-row>\n\n          </b-col>\n          <b-col col lg=\"1\" >\n          </b-col>\n          \n          <b-col class=\"resutls\">\n            <b-row class=\"justify-content-md-center\">\n              Scaling Factors\n            </b-row>\n            \n            <b-row>\n              <b-col>Males ({{this.totalPop[\"Males\"]}})</b-col>\n              <b-col>{{ this.scalingFactorMales }}</b-col>\n            </b-row>\n\n            <b-row>\n              <b-col>Females ({{this.totalPop[\"Females\"]}})</b-col>\n              <b-col>{{ this.scalingFactorFemales }}</b-col>\n            </b-row>\n\n            <b-row>\n              <b-col>All ({{this.totalPop[\"All\"]}})</b-col>\n              <b-col>{{ this.scalingFactorAll }}</b-col>\n            </b-row>\n\n          </b-col>\n\n          \n        </b-row>\n\n      </b-container>\n      \n    </b-form-group>\n        \n  </div>\n  \n</div>\n\n</template>\n\n<script>\n\n\nimport jsonData from './assets/planets_males.json';\nimport Vue from 'vue'\nimport BootstrapVue from 'bootstrap-vue'\n\nvar malesOnPlanets = {}\nvar femalesOnPlanets = {}\nvar planets = []\n\nvar populationOnPlanets = [] // array of items to show on table\n\nvar totalPopulation = {} // map of items  to show on foot table\n\nvar rowForTotalPopulation = [] // array of items for tota\n\nexport default {\n    name: 'app',\n    mounted(){\n        console.log(\"mounted\")\n    },\n    created() {\n        console.log(\"created\")\n        const arr = jsonData.map(p => p.Planet)\n        const setPlanets = new Set(arr)\n        planets = Array.from(setPlanets)\n\n        // Build hash maps for males and females from planet to number of individuals\n        planets.forEach(function(planet){\n            var malesByPlanet   = jsonData.filter(item => item.Planet === planet && item.Males === 1)\n            var femalesByPlanet = jsonData.filter(item => item.Planet === planet && item.Males === 0)\n            \n            malesOnPlanets[planet]   = malesByPlanet.length\n            femalesOnPlanets[planet] = femalesByPlanet.length\n        })\n        \n        console.log(malesOnPlanets)\n        console.log(femalesOnPlanets)\n        console.log(planets)\n\n        planets.forEach(function(planet){\n            populationOnPlanets.push({\"Planet\" :planet,\n                                      \"Males\"  :malesOnPlanets[planet],\n                                      \"Females\":femalesOnPlanets[planet]})\n        })\n\n        totalPopulation[\"Males\"]   = jsonData.filter(item => item.Males === 1).length\n        totalPopulation[\"Females\"] = jsonData.filter(item => item.Males === 0).length\n        var totalpop = totalPopulation[\"Males\"] + totalPopulation[\"Females\"];\n        totalPopulation[\"All\"] = totalpop\n        \n        rowForTotalPopulation.push({\"Set of Planets\":\"Solar System\",\n                                    \"Total Males\":totalPopulation[\"Males\"],\n                                    \"Total Females\":totalPopulation[\"Females\"],\n                                    \"Total Population\":totalpop})\n        //populationOnPlanets.push({\"Planet\":\"Z All Planets\",\"Males\":totalPopulation[\"Males\"], \"Females\":totalPopulation[\"Females\"]})\n        //rowForTotalPopulation.push({\"Total\":\"All Planets\",\"Males\":totalPopulation[\"Males\"], \"Females\":totalPopulation[\"Females\"]})\n    },\n    methods: {\n        updateTable(){\n            console.log(\"udate table\")\n            \n            var fieldsOnchange = []\n            var fieldsOnchange2 = []\n            fieldsOnchange.push({ key: 'Planet',  sortable: true })\n            fieldsOnchange2.push({ key: 'Set of Planets'})\n            \n            if (this.selectedSexes.includes('males'))\n            {\n                fieldsOnchange.push({key: 'Males', sortable: true})\n                fieldsOnchange2.push({key: 'Total Males'})\n            }\n            if (this.selectedSexes.includes('females'))\n            {\n                fieldsOnchange.push({key:'Females', sortable: true})\n                fieldsOnchange2.push({key: 'Total Females'})\n            }\n\n            if (this.selectedSexes.includes('males') && this.selectedSexes.includes('females') ){\n                fieldsOnchange2.push({key: 'Total Population'})\n            }\n            \n            this.fields1 = fieldsOnchange\n            this.fields2 = fieldsOnchange2\n        },\n        computePopulationScaling(){\n            \n            console.log(this.factorA)\n            console.log(this.factorB)\n\n            if(this.factorA === null || this.factorB === null){\n\n                this.errorMessage = \"Enter Not Null Factors\"\n                this.scalingFactorMales   = \"Not calculated\"\n                this.scalingFactorFemales = \"Not calculated\"\n                this.scalingFactorAll     = \"Not calculated\"                \n\n            }\n            else\n                {            \n                    // check inputs are numbers in valid range\n                    console.log(isNaN(this.factorA))\n                    console.log(isNaN(this.factorB))\n\n                    var badCondition0 = isNaN(this.factorA) || isNaN(this.factorB)\n                    var badCondition1 = this.factorA < 2 || this.factorA > 10000\n                    var badCondition2 = this.factorB < 2 || this.factorB > 10000\n                    \n                    if( badCondition0 || badCondition1 || badCondition2){\n                        this.errorMessage = \"Enter Numerical float Factors in range [2-10000]\"\n                        this.scalingFactorMales   = \"Not calculated\"\n                        this.scalingFactorFemales = \"Not calculated\"\n                        this.scalingFactorAll     = \"Not calculated\"                                                                              \n                    }                \n                    else {\n\n                        var numMales   = totalPopulation[\"Males\"]\n                        var numFemales = totalPopulation[\"Females\"]\n                        var numAll     = totalPopulation[\"All\"]\n\n                        var denominator = (this.factorB - 1) * (this.factorB - 1)\n                        \n                        this.scalingFactorMales   = (this.factorA * numMales   ) / denominator\n                        this.scalingFactorFemales = (this.factorA * numFemales ) / denominator\n                        this.scalingFactorAll     = (this.factorA * numAll     ) / denominator \n                        this.errorMessage = \"Entered Factors were OK -> Scaling Factors Calculated OK\"\n                    }\n                }            \n        }                \n    },\n    data() {\n        return {\n            sortBy: 'Planet',\n            fields1: [\n                { key: 'Planet',  sortable: true }]\n            ,\n            fields2 : [{ key: 'Set of Planets'}],\n            typeOfPeopleSelected: \"\",\n            planets: [],\n            malesOnPlanets:{},\n            femalesOnPlanets:{},\n            itemsTable: populationOnPlanets,\n            itemsTable2: rowForTotalPopulation,\n            totalPop: totalPopulation,\n            selectedSexes: [],\n            factorA: null,\n            factorB: null,\n            scalingFactorMales: null,\n            scalingFactorFemales: null,\n            scalingFactorAll: null,\n            errorMessage: \"----\"\n        }\n    },\n    computed: {\n        malesTotal() {\n            //totalPopulation[\"Males\"]   = jsonData.filter(item => item.Males === 1).length\n            //totalPopulation[\"Females\"] = jsonData.filter(item => item.Males === 0).length\n            //totalPopulation[\"Total\"]   = totalPopulation[\"Males\"] + totalPopulation[\"Females\"]\n            \n            return jsonData.filter(item => item.Males === 1).length\n        },\n        femalesTotal() {\n            return jsonData.filter(item => item.Males === 0).length\n        },\n        allTotal() {\n            return 100;\n        }\n        \n        \n    }\n    \n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\n.dropdown {\n  min-width: 55px;\n  text-align: left;\n}\n\n</style>\n"]}]}