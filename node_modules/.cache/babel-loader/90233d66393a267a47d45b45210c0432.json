{"remainingRequest":"/home/rcolomina/app-bv-data-aggreg/node_modules/babel-loader/lib/index.js!/home/rcolomina/app-bv-data-aggreg/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/rcolomina/app-bv-data-aggreg/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/rcolomina/app-bv-data-aggreg/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/rcolomina/app-bv-data-aggreg/src/App.vue","mtime":1570968741384},{"path":"/home/rcolomina/app-bv-data-aggreg/node_modules/cache-loader/dist/cjs.js","mtime":1570970712124},{"path":"/home/rcolomina/app-bv-data-aggreg/node_modules/babel-loader/lib/index.js","mtime":1570970712268},{"path":"/home/rcolomina/app-bv-data-aggreg/node_modules/cache-loader/dist/cjs.js","mtime":1570970712124},{"path":"/home/rcolomina/app-bv-data-aggreg/node_modules/vue-loader/lib/index.js","mtime":1570970712080}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport jsonData from \"./assets/planets_males.json\"; //import Vue from 'vue'\n//import BootstrapVue from 'bootstrap-vue'\n\nvar malesOnPlanets = {};\nvar femalesOnPlanets = {};\nvar planets = [];\nvar populationOnPlanets = []; // array of items to show on table\n\nvar totalPopulation = {}; // map of items  to show on foot table\n\nvar rowForTotalPopulation = []; // array of items for tota\n\nexport default {\n  name: 'app',\n  mounted: function mounted() {\n    console.log(\"mounted\");\n  },\n  created: function created() {\n    console.log(\"created\");\n    var arr = jsonData.map(function (p) {\n      return p.Planet;\n    });\n    var setPlanets = new Set(arr);\n    planets = Array.from(setPlanets); // Build hash maps for males and females from planet to number of individuals\n\n    planets.forEach(function (planet) {\n      var malesByPlanet = jsonData.filter(function (item) {\n        return item.Planet === planet && item.Males === 1;\n      });\n      var femalesByPlanet = jsonData.filter(function (item) {\n        return item.Planet === planet && item.Males === 0;\n      });\n      malesOnPlanets[planet] = malesByPlanet.length;\n      femalesOnPlanets[planet] = femalesByPlanet.length;\n    });\n    console.log(malesOnPlanets);\n    console.log(femalesOnPlanets);\n    console.log(planets);\n    planets.forEach(function (planet) {\n      populationOnPlanets.push({\n        \"Planet\": planet,\n        \"Males\": malesOnPlanets[planet],\n        \"Females\": femalesOnPlanets[planet]\n      });\n    });\n    totalPopulation[\"Males\"] = jsonData.filter(function (item) {\n      return item.Males === 1;\n    }).length;\n    totalPopulation[\"Females\"] = jsonData.filter(function (item) {\n      return item.Males === 0;\n    }).length;\n    var totalpop = totalPopulation[\"Males\"] + totalPopulation[\"Females\"];\n    totalPopulation[\"All\"] = totalpop;\n    rowForTotalPopulation.push({\n      \"Set of Planets\": \"Solar System\",\n      \"Total Males\": totalPopulation[\"Males\"],\n      \"Total Females\": totalPopulation[\"Females\"],\n      \"Total Population\": totalpop\n    }); //populationOnPlanets.push({\"Planet\":\"Z All Planets\",\"Males\":totalPopulation[\"Males\"], \"Females\":totalPopulation[\"Females\"]})\n    //rowForTotalPopulation.push({\"Total\":\"All Planets\",\"Males\":totalPopulation[\"Males\"], \"Females\":totalPopulation[\"Females\"]})\n  },\n  methods: {\n    updateTable: function updateTable() {\n      console.log(\"udate table\");\n      var fieldsOnchange = [];\n      var fieldsOnchange2 = [];\n      fieldsOnchange.push({\n        key: 'Planet',\n        sortable: true\n      });\n      fieldsOnchange2.push({\n        key: 'Set of Planets'\n      });\n\n      if (this.selectedSexes.includes('males')) {\n        fieldsOnchange.push({\n          key: 'Males',\n          sortable: true\n        });\n        fieldsOnchange2.push({\n          key: 'Total Males'\n        });\n      }\n\n      if (this.selectedSexes.includes('females')) {\n        fieldsOnchange.push({\n          key: 'Females',\n          sortable: true\n        });\n        fieldsOnchange2.push({\n          key: 'Total Females'\n        });\n      }\n\n      if (this.selectedSexes.includes('males') && this.selectedSexes.includes('females')) {\n        fieldsOnchange2.push({\n          key: 'Total Population'\n        });\n      }\n\n      this.fields1 = fieldsOnchange;\n      this.fields2 = fieldsOnchange2;\n    },\n    computePopulationScaling: function computePopulationScaling() {\n      console.log(this.factorA);\n      console.log(this.factorB);\n\n      if (this.factorA === null || this.factorB === null) {\n        this.errorMessage = \"Enter Not Null Factors\";\n        this.scalingFactorMales = \"Not calculated\";\n        this.scalingFactorFemales = \"Not calculated\";\n        this.scalingFactorAll = \"Not calculated\";\n      } else {\n        // check inputs are numbers in valid range\n        console.log(isNaN(this.factorA));\n        console.log(isNaN(this.factorB));\n        var badCondition0 = isNaN(this.factorA) || isNaN(this.factorB);\n        var badCondition1 = this.factorA < 2 || this.factorA > 10000;\n        var badCondition2 = this.factorB < 2 || this.factorB > 10000;\n\n        if (badCondition0 || badCondition1 || badCondition2) {\n          this.errorMessage = \"Enter Numerical float Factors in range [2-10000]\";\n          this.scalingFactorMales = \"Not calculated\";\n          this.scalingFactorFemales = \"Not calculated\";\n          this.scalingFactorAll = \"Not calculated\";\n        } else {\n          var numMales = totalPopulation[\"Males\"];\n          var numFemales = totalPopulation[\"Females\"];\n          var numAll = totalPopulation[\"All\"];\n          var denominator = (this.factorB - 1) * (this.factorB - 1);\n          this.scalingFactorMales = this.factorA * numMales / denominator;\n          this.scalingFactorFemales = this.factorA * numFemales / denominator;\n          this.scalingFactorAll = this.factorA * numAll / denominator;\n          this.errorMessage = \"Entered Factors were OK -> Scaling Factors Calculated OK\";\n        }\n      }\n    }\n  },\n  data: function data() {\n    return {\n      sortBy: 'Planet',\n      fields1: [{\n        key: 'Planet',\n        sortable: true\n      }],\n      fields2: [{\n        key: 'Set of Planets'\n      }],\n      typeOfPeopleSelected: \"\",\n      planets: [],\n      malesOnPlanets: {},\n      femalesOnPlanets: {},\n      itemsTable: populationOnPlanets,\n      itemsTable2: rowForTotalPopulation,\n      totalPop: totalPopulation,\n      selectedSexes: [],\n      factorA: null,\n      factorB: null,\n      scalingFactorMales: null,\n      scalingFactorFemales: null,\n      scalingFactorAll: null,\n      errorMessage: \"----\"\n    };\n  },\n  computed: {\n    malesTotal: function malesTotal() {\n      //totalPopulation[\"Males\"]   = jsonData.filter(item => item.Males === 1).length\n      //totalPopulation[\"Females\"] = jsonData.filter(item => item.Males === 0).length\n      //totalPopulation[\"Total\"]   = totalPopulation[\"Males\"] + totalPopulation[\"Females\"]\n      return jsonData.filter(function (item) {\n        return item.Males === 1;\n      }).length;\n    },\n    femalesTotal: function femalesTotal() {\n      return jsonData.filter(function (item) {\n        return item.Males === 0;\n      }).length;\n    },\n    allTotal: function allTotal() {\n      return 100;\n    }\n  }\n};",{"version":3,"sources":["App.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div id=\"app\">\n  <b-form-group label=\"Please, select Males/Females and click on Select button\">\n    <b-form-checkbox-group id=\"checkbox-group-1\" v-model=\"selectedSexes\">\n      <b-form-checkbox value=\"males\">Males</b-form-checkbox>\n      <b-form-checkbox value=\"females\">Females</b-form-checkbox>\n      <b-button @click=\"updateTable\">Select</b-button>\n    </b-form-checkbox-group>    \n  </b-form-group>\n  \n  <div>Selected: <strong>{{ selectedSexes }}</strong></div>\n  \n  <div class=\"container\">\n    <div class=\"row\">\n      <b-table\n        :sort-by.sync=\"sortBy\"\n        :fields=\"fields1\"\n        :items=\"itemsTable\"\n        striped hover\n        >\n        </b-table>     \n    </div>    \n    <div class=\"row\">      \n      <b-table\n        :fields=\"fields2\"\n        striped hover :items=\"itemsTable2\">\n      </b-table>\n    </div>\n\n    <b-form-group label=\"Population Scaling: Enter factors a and b in the fields bellow, and click on Calculate Population Scaling Button\">\n      <b-container>\n        <b-row class=\"scaling\">          \n          <b-col md=\"auto\">\n            <b-row>Factor A <b-form-input v-model=\"factorA\" placeholder=\"Enter factor a\"></b-form-input></b-row>\n            <b-row>Factor B <b-form-input v-model=\"factorB\" placeholder=\"Enter factor b\"></b-form-input></b-row>\n\n            <b-row>{{ this.errorMessage }}</b-row>\n\n            <b-row><b-button @click=\"computePopulationScaling\">Calculate Population Scaling</b-button></b-row>\n\n          </b-col>\n          <b-col col lg=\"1\" >\n          </b-col>\n          \n          <b-col class=\"resutls\">\n            <b-row class=\"justify-content-md-center\">\n              Scaling Factors\n            </b-row>\n            \n            <b-row>\n              <b-col>Males ({{this.totalPop[\"Males\"]}})</b-col>\n              <b-col>{{ this.scalingFactorMales }}</b-col>\n            </b-row>\n\n            <b-row>\n              <b-col>Females ({{this.totalPop[\"Females\"]}})</b-col>\n              <b-col>{{ this.scalingFactorFemales }}</b-col>\n            </b-row>\n\n            <b-row>\n              <b-col>All ({{this.totalPop[\"All\"]}})</b-col>\n              <b-col>{{ this.scalingFactorAll }}</b-col>\n            </b-row>\n          </b-col>          \n        </b-row>\n      </b-container>     \n    </b-form-group>        \n  </div>  \n</div>\n\n</template>\n\n<script>\n\nimport jsonData from './assets/planets_males.json';\n//import Vue from 'vue'\n//import BootstrapVue from 'bootstrap-vue'\n\nvar malesOnPlanets = {}\nvar femalesOnPlanets = {}\nvar planets = []\nvar populationOnPlanets = [] // array of items to show on table\nvar totalPopulation = {} // map of items  to show on foot table\nvar rowForTotalPopulation = [] // array of items for tota\n\nexport default {\n    name: 'app',\n    mounted(){\n        console.log(\"mounted\")\n    },\n    created() {\n        console.log(\"created\")\n        const arr = jsonData.map(p => p.Planet)\n        const setPlanets = new Set(arr)\n        planets = Array.from(setPlanets)\n\n        // Build hash maps for males and females from planet to number of individuals\n        planets.forEach(function(planet){\n            var malesByPlanet   = jsonData.filter(item => item.Planet === planet && item.Males === 1)\n            var femalesByPlanet = jsonData.filter(item => item.Planet === planet && item.Males === 0)\n            \n            malesOnPlanets[planet]   = malesByPlanet.length\n            femalesOnPlanets[planet] = femalesByPlanet.length\n        })\n        \n        console.log(malesOnPlanets)\n        console.log(femalesOnPlanets)\n        console.log(planets)\n\n        planets.forEach(function(planet){\n            populationOnPlanets.push({\"Planet\" :planet,\n                                      \"Males\"  :malesOnPlanets[planet],\n                                      \"Females\":femalesOnPlanets[planet]})\n        })\n\n        totalPopulation[\"Males\"]   = jsonData.filter(item => item.Males === 1).length\n        totalPopulation[\"Females\"] = jsonData.filter(item => item.Males === 0).length\n        var totalpop = totalPopulation[\"Males\"] + totalPopulation[\"Females\"];\n        totalPopulation[\"All\"] = totalpop\n        \n        rowForTotalPopulation.push({\"Set of Planets\":\"Solar System\",\n                                    \"Total Males\":totalPopulation[\"Males\"],\n                                    \"Total Females\":totalPopulation[\"Females\"],\n                                    \"Total Population\":totalpop})\n        //populationOnPlanets.push({\"Planet\":\"Z All Planets\",\"Males\":totalPopulation[\"Males\"], \"Females\":totalPopulation[\"Females\"]})\n        //rowForTotalPopulation.push({\"Total\":\"All Planets\",\"Males\":totalPopulation[\"Males\"], \"Females\":totalPopulation[\"Females\"]})\n    },\n    methods: {\n        updateTable(){\n            console.log(\"udate table\")\n            \n            var fieldsOnchange = []\n            var fieldsOnchange2 = []\n            fieldsOnchange.push({ key: 'Planet',  sortable: true })\n            fieldsOnchange2.push({ key: 'Set of Planets'})\n            \n            if (this.selectedSexes.includes('males'))\n            {\n                fieldsOnchange.push({key: 'Males', sortable: true})\n                fieldsOnchange2.push({key: 'Total Males'})\n            }\n            if (this.selectedSexes.includes('females'))\n            {\n                fieldsOnchange.push({key:'Females', sortable: true})\n                fieldsOnchange2.push({key: 'Total Females'})\n            }\n\n            if (this.selectedSexes.includes('males') && this.selectedSexes.includes('females') ){\n                fieldsOnchange2.push({key: 'Total Population'})\n            }\n            \n            this.fields1 = fieldsOnchange\n            this.fields2 = fieldsOnchange2\n        },\n        computePopulationScaling(){\n            \n            console.log(this.factorA)\n            console.log(this.factorB)\n\n            if(this.factorA === null || this.factorB === null){\n\n                this.errorMessage = \"Enter Not Null Factors\"\n                this.scalingFactorMales   = \"Not calculated\"\n                this.scalingFactorFemales = \"Not calculated\"\n                this.scalingFactorAll     = \"Not calculated\"                \n\n            }\n            else\n                {            \n                    // check inputs are numbers in valid range\n                    console.log(isNaN(this.factorA))\n                    console.log(isNaN(this.factorB))\n\n                    var badCondition0 = isNaN(this.factorA) || isNaN(this.factorB)\n                    var badCondition1 = this.factorA < 2 || this.factorA > 10000\n                    var badCondition2 = this.factorB < 2 || this.factorB > 10000\n                    \n                    if( badCondition0 || badCondition1 || badCondition2){\n                        this.errorMessage = \"Enter Numerical float Factors in range [2-10000]\"\n                        this.scalingFactorMales   = \"Not calculated\"\n                        this.scalingFactorFemales = \"Not calculated\"\n                        this.scalingFactorAll     = \"Not calculated\"                                                                              \n                    }                \n                    else {\n\n                        var numMales   = totalPopulation[\"Males\"]\n                        var numFemales = totalPopulation[\"Females\"]\n                        var numAll     = totalPopulation[\"All\"]\n\n                        var denominator = (this.factorB - 1) * (this.factorB - 1)\n                        \n                        this.scalingFactorMales   = (this.factorA * numMales   ) / denominator\n                        this.scalingFactorFemales = (this.factorA * numFemales ) / denominator\n                        this.scalingFactorAll     = (this.factorA * numAll     ) / denominator \n                        this.errorMessage = \"Entered Factors were OK -> Scaling Factors Calculated OK\"\n                    }\n                }            \n        }                \n    },\n    data() {\n        return {\n            sortBy: 'Planet',\n            fields1: [\n                { key: 'Planet',  sortable: true }]\n            ,\n            fields2 : [{ key: 'Set of Planets'}],\n            typeOfPeopleSelected: \"\",\n            planets: [],\n            malesOnPlanets:{},\n            femalesOnPlanets:{},\n            itemsTable: populationOnPlanets,\n            itemsTable2: rowForTotalPopulation,\n            totalPop: totalPopulation,\n            selectedSexes: [],\n            factorA: null,\n            factorB: null,\n            scalingFactorMales: null,\n            scalingFactorFemales: null,\n            scalingFactorAll: null,\n            errorMessage: \"----\"\n        }\n    },\n    computed: {\n        malesTotal() {\n            //totalPopulation[\"Males\"]   = jsonData.filter(item => item.Males === 1).length\n            //totalPopulation[\"Females\"] = jsonData.filter(item => item.Males === 0).length\n            //totalPopulation[\"Total\"]   = totalPopulation[\"Males\"] + totalPopulation[\"Females\"]\n            \n            return jsonData.filter(item => item.Males === 1).length\n        },\n        femalesTotal() {\n            return jsonData.filter(item => item.Males === 0).length\n        },\n        allTotal() {\n            return 100;\n        }\n        \n        \n    }\n    \n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\n</style>\n"],"sourceRoot":"src"}]}